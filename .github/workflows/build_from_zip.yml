name: Build Android APK from ZIP

on:
  workflow_dispatch:
  push:
    paths:
      - ".github/workflows/build_from_zip.yml"
      - "**/*.zip"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Trouve allo_qubic_mvp1.zip (ou, à défaut, le seul ZIP présent)
      - name: Locate ZIP
        shell: bash
        run: |
          set -euo pipefail
          DEFAULT_ZIP="allo_qubic_mvp1.zip"
          if [ -f "$DEFAULT_ZIP" ]; then
            echo "ZIP_FILE=$DEFAULT_ZIP" >> "$GITHUB_ENV"
            echo "Found: $DEFAULT_ZIP"
          else
            MAPFILE=($(find . -maxdepth 2 -type f -name "*.zip" | sort))
            echo "Zips: ${MAPFILE[*]:-none}"
            if [ ${#MAPFILE[@]} -eq 0 ]; then
              echo "::error::Aucun ZIP trouvé. Place allo_qubic_mvp1.zip à la racine du repo."
              exit 1
            fi
            if [ ${#MAPFILE[@]} -gt 1 ]; then
              echo "::warning::Plusieurs ZIP détectés, je prends le premier: ${MAPFILE[0]}"
            fi
            echo "ZIP_FILE=${MAPFILE[0]}" >> "$GITHUB_ENV"
          fi

      # Dézippe, détecte le dossier avec pubspec.yaml, copie dans la racine
      - name: Unzip and detect Flutter project
        shell: bash
        run: |
          set -euo pipefail
          unzip -o "$ZIP_FILE" -d tmp_unzip > /dev/null
          CANDIDATES=$(find tmp_unzip -maxdepth 3 -type f -name "pubspec.yaml" | sort || true)
          if [ -z "$CANDIDATES" ]; then
            echo "::error::pubspec.yaml introuvable dans le ZIP."
            exit 1
          fi
          PROJECT_DIR=$(dirname "$(echo "$CANDIDATES" | head -n 1)")
          echo "Project root: $PROJECT_DIR"
          # Copie tout dans l'espace de travail, en évitant d'écraser .github
          rsync -a --delete --exclude '.git*' --exclude '.github' "$PROJECT_DIR"/ ./
          test -f pubspec.yaml || (echo "::error::pubspec.yaml manquant après copie." && exit 1)

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.22.2"

      # Si le dossier android n'existe pas, on le génère
      - name: Ensure Android project exists
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "android/app/build.gradle" ]; then
            flutter create --platforms=android .
          else
            echo "Android project already present."
          fi

      - name: Flutter pub get
        run: flutter pub get

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Build APK (debug)
        run: flutter build apk --debug

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug
          path: build/app/outputs/flutter-apk/app-debug.apk
